local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Jailbird UI", "DarkTheme")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local lp = Players.LocalPlayer
local Mouse = lp:GetMouse()

-- Chams Setup
local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"
local connections = {}
local chamsEnabled = false

local function Highlight(plr)
    if plr == lp or (plr.Team and lp.Team and plr.Team == lp.Team) then return end
    local highlight = Storage:FindFirstChild(plr.Name) or Instance.new("Highlight")
    highlight.Name = plr.Name
    highlight.FillColor = Color3.fromRGB(175, 25, 255)
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.FillTransparency = 0.5
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    highlight.OutlineTransparency = 0
    highlight.Parent = Storage
    local plrchar = plr.Character
    if plrchar then highlight.Adornee = plrchar end
    connections[plr] = connections[plr] or plr.CharacterAdded:Connect(function(char)
        if chamsEnabled then highlight.Adornee = char end
    end)
end

local function ToggleChams(state)
    chamsEnabled = state
    Storage:ClearAllChildren()
    for _, conn in pairs(connections) do
        conn:Disconnect()
    end
    table.clear(connections)
    if state then
        for _, plr in next, Players:GetPlayers() do
            Highlight(plr)
        end
    end
end

Players.PlayerAdded:Connect(function(plr)
    if chamsEnabled then Highlight(plr) end
end)
Players.PlayerRemoving:Connect(function(plr)
    if Storage:FindFirstChild(plr.Name) then Storage[plr.Name]:Destroy() end
    if connections[plr] then connections[plr]:Disconnect() end
end)

-- Aimbot Setup
local aiming = false
local target = nil
local mouseSensitivity = UserInputService.MouseDeltaSensitivity
local aimConfig = {
    Enabled = false,
    AimKey = Enum.KeyCode.E,
    AimPart = "HumanoidRootPart",
    Smoothing = 0.5, -- 0 to 1
    Sensitivity = 2 -- 0 to 5
}

local function IsReady(tgt)
    if not tgt or not tgt:FindFirstChildOfClass("Humanoid") or not tgt:FindFirstChild(aimConfig.AimPart) or not lp.Character or not lp.Character:FindFirstChildOfClass("Humanoid") then 
        return false 
    end
    local plr = Players:GetPlayerFromCharacter(tgt)
    if not plr or plr == lp or (plr.Team and lp.Team and plr.Team == lp.Team) then 
        return false 
    end
    local humanoid = tgt:FindFirstChildOfClass("Humanoid")
    if humanoid.Health <= 0 then 
        return false 
    end
    return true, tgt, tgt[aimConfig.AimPart].Position
end

RunService.Heartbeat:Connect(function()
    if aimConfig.Enabled and aiming then
        local closest = math.huge
        target = nil
        for _, plr in next, Players:GetPlayers() do
            local isReady, char, partPos = IsReady(plr.Character)
            if isReady then
                local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(partPos)
                if onScreen then
                    local mag = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if mag < closest then
                        target = char
                        closest = mag
                        print("Target found:", plr.Name, "Distance:", mag)
                    end
                end
            end
        end
        if target and IsReady(target) then
            local _, _, partPos = IsReady(target)
            UserInputService.MouseDeltaSensitivity = 0
            local tweenInfo = TweenInfo.new(aimConfig.Smoothing, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
            local tween = TweenService:Create(workspace.CurrentCamera, tweenInfo, { CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, partPos) })
            tween:Play()
            print("Aiming at:", target.Name)
        else
            UserInputService.MouseDeltaSensitivity = mouseSensitivity
            print("No valid target")
        end
    else
        aiming = false
        target = nil
        UserInputService.MouseDeltaSensitivity = mouseSensitivity
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == aimConfig.AimKey then
        aiming = true
        print("Aimbot activated with key:", aimConfig.AimKey)
    end
end)
UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == aimConfig.AimKey then
        aiming = false
        print("Aimbot deactivated")
    end
end)

-- UI Tabs
local VisualsTab = Window:NewTab("Visuals")
local CombatTab = Window:NewTab("Combat")

-- Visuals Section
local VisualsSection = VisualsTab:NewSection("Chams Settings")
VisualsSection:NewToggle("Enable Chams", "Toggles persistent Chams", function(state)
    ToggleChams(state)
end)
VisualsSection:NewColorPicker("Fill Color", "Change Chams fill color", Color3.fromRGB(175, 25, 255), function(color)
    for _, highlight in next, Storage:GetChildren() do
        highlight.FillColor = color
    end
end)
VisualsSection:NewColorPicker("Outline Color", "Change Chams outline color", Color3.fromRGB(255, 255, 255), function(color)
    for _, highlight in next, Storage:GetChildren() do
        highlight.OutlineColor = color
    end
end)
VisualsSection:NewSlider("Fill Transparency", "Adjust fill transparency", 100, 0, 50, function(value)
    for _, highlight in next, Storage:GetChildren() do
        highlight.FillTransparency = value / 100
    end
end)
VisualsSection:NewSlider("Outline Transparency", "Adjust outline transparency", 100, 0, 0, function(value)
    for _, highlight in next, Storage:GetChildren() do
        highlight.OutlineTransparency = value / 100
    end
end)

-- Combat Section
local CombatSection = CombatTab:NewSection("Aimbot Settings")
CombatSection:NewToggle("Enable Aimbot", "Toggles Aimbot on/off", function(state)
    aimConfig.Enabled = state
    print("Aimbot Enabled:", state)
end)
CombatSection:NewKeybind("Aimbot Key", "Set Aimbot trigger key", Enum.KeyCode.E, function(key)
    aimConfig.AimKey = key
    print("Aimbot Key set to:", key)
end)
CombatSection:NewDropdown("Target Part", "Select aim target", {"Head", "Torso"}, function(part)
    aimConfig.AimPart = part == "Head" and "Head" or "HumanoidRootPart"
    print("Target Part set to:", aimConfig.AimPart)
end)
CombatSection:NewSlider("Smoothing", "Adjust Aimbot smoothing (0-1)", 100, 0, 50, function(value)
    aimConfig.Smoothing = value / 100
    print("Smoothing set to:", aimConfig.Smoothing)
end)
CombatSection:NewSlider("Sensitivity", "Adjust Aimbot sensitivity", 5, 0, 2, function(value)
    aimConfig.Sensitivity = value
    print("Sensitivity set to:", aimConfig.Sensitivity)
end)

-- Right Shift Toggle Fix
local uiVisible = true
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        uiVisible = not uiVisible
        Library:ToggleUI()
        print("UI Toggled:", uiVisible)
    end
end)
